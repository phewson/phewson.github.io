<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on Insights for Action</title><link>/tags/hugo/</link><description>Recent content in Hugo on Insights for Action</description><generator>Hugo</generator><language>en</language><managingEditor>paul@insightsforaction.uk (Paul Hewson)</managingEditor><webMaster>paul@insightsforaction.uk (Paul Hewson)</webMaster><lastBuildDate>Tue, 18 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Static Websites with Hugo and R-Blogdown</title><link>/tech/2020-08-18-hugo_blogdown/</link><pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate><author>paul@insightsforaction.uk (Paul Hewson)</author><guid>/tech/2020-08-18-hugo_blogdown/</guid><description>&lt;p>The current iteration of this website is a static website based on &lt;a href="https://gohugo.io">Hugo&lt;/a>. In my opinion, there is a lot to like about static websites. I have previously used &lt;strong>Jekyll&lt;/strong> and once upon a time coded &lt;em>html&lt;/em> manually. However, modern static website generators allow a wonderful presentation. The currently styling is based upon the &lt;a href="https://themes.gohugo.io/hugo-terrassa-theme/">Terrassa&lt;/a> theme; for me it scored highly for accessibility and mobile friendliness. The bigger issue for me though is to do data and version controlling. With a dynamic website, you don&amp;rsquo;t necessarily know the data someone is accessing - it is drawn from a live database which by design can be updated independently of the website. With a static website, the data become version controlled along with the website. For some websites, that is a bad design choice. But I wanted to be able to demonstrate data analysis on data that I might revisit (because it has been updated) or using new methods. All this can be version controlled.&lt;/p></description></item></channel></rss>